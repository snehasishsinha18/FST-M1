<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="2b603818-6055-4ee9-88fc-46e1b4a1ac6a" created="3.58.0" activeEnvironment="Default environment" encryptionMode="Not encrypted" name="REST Project 3" projectVersion="" updated="3.58.0 2025-01-10T10:05:45Z" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:interface xsi:type="con:RestService" id="7a4c83d9-d0b6-4939-bb2d-bb48de18f086" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://ipwhois.app" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings id="37c1a6d5-a562-439d-917e-dc83fb3af955"/>
    <con:definitionCache/>
    <con:endpoints>
      <con:endpoint>http://ipwhois.app</con:endpoint>
    </con:endpoints>
    <con:resource name="IP" path="/json/{IP}" id="19ec8582-6e12-4f2b-8847-eb495257294c">
      <con:settings/>
      <con:parameters/>
      <con:method name="IP" id="c115d3b5-bf33-431a-9789-3d0b987b45c8" method="GET">
        <con:settings/>
        <con:parameters/>
        <con:request name="Request 1" id="e18386f1-aa1b-4fdb-ad70-93b3d6f93ea3" mediaType="application/json">
          <con:settings/>
          <con:endpoint>http://ipwhois.app</con:endpoint>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:testSuite id="73546bdd-1482-491f-8522-c32af39fd59c" name="http://ipwhois.app Test Suite">
    <con:settings id="2e2204ec-5003-419f-a7f6-46a498ba305d"/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="7abf91df-1777-42b5-86e5-57829672a9fc" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="http://ipwhois.app Test Case 1" searchProperties="true" timeout="0">
      <con:settings/>
      <con:testStep type="restrequest" name="Request 1" id="a4ba4718-5113-4ca0-9dc1-99b29c2eb788">
        <con:settings/>
        <con:config service="http://ipwhois.app" resourcePath="/json/{IP}" methodName="IP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Request 1" id="e18386f1-aa1b-4fdb-ad70-93b3d6f93ea3" mediaType="application/json">
            <con:settings/>
            <con:endpoint>http://ipwhois.app</con:endpoint>
            <con:request/>
            <con:assertion type="Valid HTTP Status Codes" id="52d3d285-a1aa-47c2-bd09-f4ab75a1aa19" name="Valid HTTP Status Codes">
              <con:settings/>
              <con:configuration>
                <codes>200</codes>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase>
    <con:properties/>
    <con:reportParameters/>
  </con:testSuite>
  <con:properties/>
  <con:wssContainer/>
  <con:databaseConnectionContainer/>
  <con:jmsConnectionContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:reporting>
    <con:xmlTemplates/>
    <con:parameters/>
  </con:reporting>
  <con:eventHandlers type="RequestFilter.filterRequest" name="RequestFilter.filterRequest">
    <con:script>// Sample event script to add custom HTTP header to all outgoing REST, SOAP and HTTP(S) calls
// This code is often used for adding custom authentication to ReadyAPI functional tests

// If hardcoding the token, uncomment and change line 5
// token = '4567'

// If your token is parameterized in Project level custom property, uncomment line 8
// token = request.parent.testCase.testSuite.project.getProperty('auth_token').getValue()

// To modify all outgoing calls, remove comments from lines 11 to 16
// headers = request.requestHeaders
// if (headers.containsKey('auth_token2') == false) {
//   headers.put('auth_token2', token)
//   request.requestHeaders = headers
// }</con:script>
  </con:eventHandlers>
  <con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep">
    <con:script>// Save all test step results into files
// Change the directory path in line 5 to a location where you want to store details
// then uncomment lines 5 to 10

// filePath = 'C:\\tempOutputDirectory\\'
// fos = new java.io.FileOutputStream(filePath + testStepResult.testStep.label + '.txt', true)
// pw = new java.io.PrintWriter(fos)
// testStepResult.writeTo(pw)
// pw.close()
// fos.close()</con:script>
  </con:eventHandlers>
  <con:authRepository/>
  <con:tags/>
</con:soapui-project>
